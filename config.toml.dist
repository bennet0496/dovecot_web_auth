[database]
dsn = "mysql+pymysql://user:pass@host/mail"

[ldap]
host = "ldap.example.com"
tls = false
basedn = "ou=users,dc=example,dc=com"

[cache]
host = "localhost"

[audit]
# Comma separated lists fof services to always deny for
disabled_services = [ "pop3" ]

# What to return if request shall succeed, on the audit only route
#
# next (PASSDB_RESULT_NEXT) indicates that this passdb did not authenticate user, next passdb should do it.
#       if we are the last passdb the request will fail
# unknown (PASSDB_RESULT_USER_UNKNOWN) prent we don't know the user and leave it up to the current authentication state
#         or next passdb
# ok (PASSDB_RESULT_OK) if a previous passwd set "skip_password_check", i.e. it authenticated the user return ok.
#    if "passdbs_seen_user_unknown" is set, i.e. none of the previous passdb knew the user we will always return unknown
#    as well, to not inadvertently let false request through

audit_result_success = "unkown"

local_locationname = "local network"
# Also log/audit request from local ips
log_local = true

[audit.local_networks]
"172.17.1.0/24" = "Network 1"
"172.17.2.0/24" = "Network 2"

[audit.maxmind]
city = "./mmdb/GeoLite2-City.mmdb"
asn = "./mmdb/GeoLite2-ASN.mmdb"

[audit.lists]
ip_networks = "./lists/ip_net.deny.lst"
reverse_hostname = "./lists/rev_host.deny.lst"

network_name = "./lists/net_name.deny.lst"
network_cc = "./lists/net_cc.deny.lst"

entities = "./lists/entity.deny.lst"

as_numbers = "./lists/asn.deny.lst"
as_names = "./lists/as_dscr.deny.lst"
as_cc = "./lists/as_cc.deny.list"

geo_location_ids = "./lists/maxmind/geo_loc.deny.lst"
coordinates = "./lists/maxmind.deny.lst"